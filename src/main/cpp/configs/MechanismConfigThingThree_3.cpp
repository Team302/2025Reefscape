// clang-format off
//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.02
// Generated on Friday, January 24, 2025 10:55:46 PM

#include <string>

#include "utils/PeriodicLooper.h"
#include "utils/logging/Logger.h"
#include "configs/MechanismConfigMgr.h"
#include "configs/MechanismConfigThingThree_3.h"
#include "configs/RobotElementNames.h"


using std::string;

void MechanismConfigThingThree_3::DefineMechanisms()
{
	Logger::GetLogger()->LogData ( LOGGER_LEVEL::PRINT, string ( "Initializing mechanism" ), string ( "LeaderFollowerManager" ), "" );
	m_theLeaderFollowerManager = new LeaderFollowerManager ( MechanismConfigMgr::RobotIdentifier::THING_THREE_3 );
	m_theLeaderFollowerManager->CreateThingThree3();
	m_theLeaderFollowerManager->CreateAndRegisterStates();
	m_theLeaderFollowerManager->InitializeThingThree3();
	m_theLeaderFollowerManager->Init ( /*m_theLeaderFollowerManager*/ );
	m_mechanismMap[MechanismTypes::MECHANISM_TYPE::LEADER_FOLLOWER_MANAGER] = m_theLeaderFollowerManager;
}

StateMgr *MechanismConfigThingThree_3::GetMechanism ( MechanismTypes::MECHANISM_TYPE mechType )
{
	auto itr = m_mechanismMap.find ( mechType );
	if ( itr != m_mechanismMap.end() )
	{
		return itr->second;
	}
	return nullptr;
}
