// clang-format off
//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.02
// Generated on Friday, January 24, 2025 8:41:26 PM

#pragma once

#include <string>
#include <memory>

// FRC Includes
#include <networktables/NetworkTable.h>

#include "ctre/phoenix6/TalonFX.hpp"
#include "ctre/phoenix6/controls/Follower.hpp"
#include "ctre/phoenix6/configs/Configs.hpp"
#include <frc/DigitalInput.h>
#include <frc/filter/Debouncer.h>

#include "mechanisms/base/BaseMech.h"
#include "state/StateMgr.h"
#include "mechanisms/controllers/ControlData.h"

#include "configs/RobotElementNames.h"
#include "configs/MechanismConfigMgr.h"

class IntakeManager : public BaseMech, public StateMgr
{
public:
	enum STATE_NAMES
	{
		STATE_OFF,
		STATE_INTAKE,
		STATE_HOLD,
		STATE_TRANSFER_IN,
		STATE_TRANSFER_OUT,
		STATE_PROCESS,
		STATE_EXPEL
	};

	IntakeManager ( MechanismConfigMgr::RobotIdentifier activeRobotId );
	IntakeManager() = delete;
	~IntakeManager() = default;

	void CreatePRACTICE_BOT9999();
	void InitializePRACTICE_BOT9999();


	/// @brief Set the control constants (e.g. PIDF values).
	/// @param indentifier the motor controller usage to identify the motor
	/// @param slot position on the motor controller to set
	/// @param pid control data / constants
	virtual void SetControlConstants ( RobotElementNames::MOTOR_CONTROLLER_USAGE indentifier, int slot, ControlData pid );

	/// @brief update the output to the mechanism using the current controller and target value(s)
	virtual void Update();

	void UpdateTargetIntakePercentOutput ( double percentOut ) { m_IntakePercentOutput.Output = percentOut; m_IntakeActiveTarget = &m_IntakePercentOutput;}
	void UpdateTargetIntakePercentOutput ( double percentOut, bool enableFOC ) { m_IntakePercentOutput.Output = percentOut; m_IntakePercentOutput.EnableFOC = enableFOC; m_IntakeActiveTarget = &m_IntakePercentOutput;}
	void UpdateTargetExtenderPositionDegree ( units::angle::turn_t position ) { m_ExtenderPositionDegree.Position = position * 1; m_ExtenderActiveTarget = &m_ExtenderPositionDegree;}
	void UpdateTargetExtenderPercentOutput ( double percentOut ) { m_ExtenderPercentOutput.Output = percentOut; m_ExtenderActiveTarget = &m_ExtenderPercentOutput;}
	void UpdateTargetExtenderPercentOutput ( double percentOut, bool enableFOC ) { m_ExtenderPercentOutput.Output = percentOut; m_ExtenderPercentOutput.EnableFOC = enableFOC; m_ExtenderActiveTarget = &m_ExtenderPercentOutput;}

	void SetPIDExtenderPositionDegree();




	virtual bool IsAtMinPosition ( RobotElementNames::MOTOR_CONTROLLER_USAGE identifier ) const;
	virtual bool IsAtMaxPosition ( RobotElementNames::MOTOR_CONTROLLER_USAGE identifier ) const;



	void CreateAndRegisterStates();
	void Cyclic();
	void RunCommonTasks() override;

	MechanismConfigMgr::RobotIdentifier getActiveRobotId() { return m_activeRobotId; }

	ctre::phoenix6::hardware::TalonFX* GetIntake() const {return m_Intake;}
	ctre::phoenix6::hardware::TalonFX* GetExtender() const {return m_Extender;}
	bool GetIntakeSensorState() const {return m_IntakeSensor->Get();}
	ControlData* GetPercentOutput() const {return m_PercentOutput;}
	ControlData* GetPositionDegree() const {return m_PositionDegree;}

	bool GetFailedSensor() const {return m_failedSensorLatch;}

	static std::map<std::string, STATE_NAMES> stringToSTATE_NAMESEnumMap;

protected:
	MechanismConfigMgr::RobotIdentifier m_activeRobotId;
	std::string m_ntName;
	std::string m_tuningIsEnabledStr;
	bool m_tuning = false;
	std::shared_ptr<nt::NetworkTable> m_table;

	void SetCurrentState ( int state, bool run ) override;
	ControlData *GetControlData ( std::string name ) override;

private:
	std::unordered_map<std::string, STATE_NAMES> m_stateMap;

	ctre::phoenix6::hardware::TalonFX* m_Intake;
	ctre::phoenix6::hardware::TalonFX* m_Extender;
	frc::DigitalInput* m_IntakeSensor;
	ControlData* m_PercentOutput;
	ControlData* m_PositionDegree;



	void CheckForTuningEnabled();
	void ReadTuningParamsFromNT();
	void PushTuningParamsToNT();

	void InitializeTalonFXIntakePRACTICE_BOT9999();
	void InitializeTalonFXExtenderPRACTICE_BOT9999();

	ctre::phoenix6::controls::DutyCycleOut m_IntakePercentOutput{0.0};
	ctre::phoenix6::controls::PositionTorqueCurrentFOC m_ExtenderPositionDegree{units::angle::turn_t ( 0.0 ) };
	ctre::phoenix6::controls::DutyCycleOut m_ExtenderPercentOutput{0.0};
	ctre::phoenix6::controls::ControlRequest *m_IntakeActiveTarget;
	ctre::phoenix6::controls::ControlRequest *m_ExtenderActiveTarget;
	
	bool m_failedSensorLatch = false;
	bool m_manualModeButtonReleased = true;
};