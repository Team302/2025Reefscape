// clang-format off
//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.02
// Generated on Friday, January 24, 2025 8:21:52 PM

#pragma once

#include <memory>
#include <string>

// FRC Includes
#include <networktables/NetworkTable.h>

#include "ctre/phoenix6/TalonFX.hpp"
#include "ctre/phoenix6/controls/Follower.hpp"
#include "ctre/phoenix6/configs/Configs.hpp"
#include <ctre/phoenix/motorcontrol/can/TalonSRX.h>
#include <ctre/phoenix/motorcontrol/SupplyCurrentLimitConfiguration.h>
#include <frc/DigitalInput.h>
#include <frc/filter/Debouncer.h>
#include <ctre/phoenix6/CANcoder.hpp>
#include <ctre/phoenix6/configs/Configurator.hpp>
#include <ctre/phoenix6/signals/SpnEnums.hpp>

#include "mechanisms/base/BaseMech.h"
#include "state/StateMgr.h"
#include "mechanisms/controllers/ControlData.h"

#include "configs/RobotElementNames.h"
#include "configs/MechanismConfigMgr.h"

#include "state/IRobotStateChangeSubscriber.h"
#include "frc/geometry/Pose2d.h"

#include "RobotIdentifier.h"

class DragonTale : public BaseMech, public StateMgr, public IRobotStateChangeSubscriber
{
public:
	enum STATE_NAMES
	{
		STATE_INITIALIZE,
		STATE_READY,
		STATE_HUMAN_PLAYER_LOAD,
		STATE_GRAB_ALGAE_REEF,
		STATE_HOLD,
		STATE_GRAB_ALGAE_FLOOR,
		STATE_PROCESS,
		STATE_NET,
		STATE_SCORE_ALGAE,
		STATE_L1SCORING_POSITION,
		STATE_L2SCORING_POSITION,
		STATE_L3SCORING_POSITION,
		STATE_L4SCORING_POSITION,
		STATE_SCORE_CORAL,
		STATE_MANUAL_CORAL_LOAD,
		STATE_MANUAL_GRAB_ALGAE_REEF,
		STATE_MANUAL_GRAB_ALGAE_FLOOR
	};

	DragonTale ( RobotIdentifier activeRobotId );
	DragonTale() = delete;
	~DragonTale() = default;

	void CreatePRACTICE_BOT9999();
	void InitializePRACTICE_BOT9999();


	/// @brief Set the control constants (e.g. PIDF values).
	/// @param indentifier the motor controller usage to identify the motor
	/// @param slot position on the motor controller to set
	/// @param pid control data / constants
	virtual void SetControlConstants ( RobotElementNames::MOTOR_CONTROLLER_USAGE indentifier, int slot, ControlData pid );

	/// @brief update the output to the mechanism using the current controller and target value(s)
	virtual void Update();

	void UpdateTargetArmPositionDegree ( units::angle::turn_t position ) { m_ArmPositionDegree.Position = position; m_ArmActiveTarget = &m_ArmPositionDegree;}
	void UpdateTargetElevatorLeaderPositionInch ( units::length::inch_t position ) { m_ElevatorLeaderPositionInch.Position = units::angle::turn_t(position.value()); m_ElevatorLeaderActiveTarget = &m_ElevatorLeaderPositionInch;}
	void UpdateTargetCoralPercentOutput ( double percentOut )  {m_CoralActiveTarget = percentOut;}
	void UpdateTargetAlgaePercentOutput ( double percentOut )  {m_AlgaeActiveTarget = percentOut;}

	void SetPIDArmPositionDegree();
	void SetPIDElevatorLeaderPositionInch();

	virtual bool IsAtMinPosition ( RobotElementNames::MOTOR_CONTROLLER_USAGE identifier ) const;
	virtual bool IsAtMaxPosition ( RobotElementNames::MOTOR_CONTROLLER_USAGE identifier ) const;

	void CreateAndRegisterStates();
	void Cyclic();
	void RunCommonTasks() override;

	RobotIdentifier getActiveRobotId() { return m_activeRobotId; }

	ctre::phoenix6::hardware::TalonFX* GetArm() const {return m_Arm;}
	ctre::phoenix6::hardware::TalonFX* GetElevatorLeader() const {return m_ElevatorLeader;}
	ctre::phoenix::motorcontrol::can::TalonSRX* GetCoral() const {return m_Coral;}
	ctre::phoenix::motorcontrol::can::TalonSRX* GetAlgae() const {return m_Algae;}
	ctre::phoenix6::hardware::TalonFX* GetElevatorFollower() const {return m_ElevatorFollower;}
	bool GetCoralInSensorState() const {return m_CoralInSensor->Get();}
	bool GetCoralOutSensorState() const {return m_CoralOutSensor->Get();}
	bool GetAlgaeSensorState() const {return m_AlgaeSensor->Get();}
	ctre::phoenix6::hardware::CANcoder* GetArmAngleSensor() const {return m_ArmAngleSensor;}
	ctre::phoenix6::hardware::CANcoder* GetElevatorHeightSensor() const {return m_ElevatorHeightSensor;}
	ControlData* GetPositionInch() const {return m_PositionInch;}
	ControlData* GetPositionDegree() const {return m_PositionDegree;}
	ControlData* GetPercentOutput() const {return m_PercentOutput;}

	units::length::inch_t GetElevatorHeight() {return units::length::inch_t(m_ElevatorHeightSensor->GetPosition().GetValueAsDouble());}
	bool AllSensorsFalse() {return !GetCoralInSensorState() && !GetCoralOutSensorState() && !GetAlgaeSensorState();}

	units::angle::degree_t GetArmAngle() {return m_ArmAngleSensor->GetAbsolutePosition().GetValue();}

	bool IsCoralMode() const {return m_scoringMode == RobotStateChanges::ScoringMode::Coral;}
	bool IsAlgaeMode() const {return m_scoringMode == RobotStateChanges::ScoringMode::Algae;}

	void ManualControl();

	void UpdateScoreMode(RobotStateChanges::StateChange change, int value);

	units::length::inch_t GetAlgaeHeight();

	void SetArmTarget(units::angle::degree_t target) {m_armTarget = std::clamp(target, m_minAngle, m_maxAngle);}
	void SetElevatorTarget(units::length::inch_t target) {m_elevatorTarget = std::clamp(target, m_minHeight, m_maxHeight);}

	bool GetManualMode() {return m_manualMode;}
	void SetSensorFailSafe();

	void UpdateTarget();

	static std::map<std::string, STATE_NAMES> stringToSTATE_NAMESEnumMap;

protected:
	RobotIdentifier m_activeRobotId;
	std::string m_ntName;
	std::string m_tuningIsEnabledStr;
	bool m_tuning = false;
	std::shared_ptr<nt::NetworkTable> m_table;

	void SetCurrentState ( int state, bool run ) override;
	ControlData *GetControlData ( std::string name ) override;

private:
	std::unordered_map<std::string, STATE_NAMES> m_stateMap;

	ctre::phoenix6::hardware::TalonFX* m_Arm;
	ctre::phoenix6::hardware::TalonFX* m_ElevatorLeader;
	ctre::phoenix::motorcontrol::can::TalonSRX *m_Coral;
	ctre::phoenix::motorcontrol::can::TalonSRX *m_Algae;
	ctre::phoenix6::hardware::TalonFX* m_ElevatorFollower;
	frc::DigitalInput* m_CoralInSensor;
	frc::DigitalInput* m_CoralOutSensor;
	frc::DigitalInput* m_AlgaeSensor;
	ctre::phoenix6::hardware::CANcoder* m_ArmAngleSensor;
	ctre::phoenix6::hardware::CANcoder* m_ElevatorHeightSensor;
	ControlData* m_PositionInch;
	ControlData* m_PositionDegree;
	ControlData* m_PercentOutput;
	RobotStateChanges::ScoringMode m_scoringMode;

	const units::length::inch_t m_grabAlgaeHigh = units::length::inch_t(10.7); //change these later
	const units::length::inch_t m_grabAlgaeLow = units::length::inch_t(3.7);
	
	units::angle::degree_t m_armTarget = units::angle::degree_t(90.0);
	units::length::inch_t m_elevatorTarget = units::length::inch_t(0.0);

	const units::angle::degree_t m_minAngle{-30.0};
	const units::angle::degree_t m_maxAngle{90.0};

	const units::length::inch_t m_minHeight{0.0};
	const units::length::inch_t m_maxHeight{30.0};

	const units::length::inch_t m_elevatorErrorThreshold{5.0};
	const units::length::inch_t m_elevatorProtectionHeight{5.0};
	const units::angle::degree_t m_armProtectionAngle{70.0};

	void CheckForTuningEnabled();
	void ReadTuningParamsFromNT();
	void PushTuningParamsToNT();

	void InitializeTalonFXArmPRACTICE_BOT9999();
	void InitializeTalonFXElevatorLeaderPRACTICE_BOT9999();
	void InitializeTalonSRXCoralPRACTICE_BOT9999();
	void InitializeTalonSRXAlgaePRACTICE_BOT9999();
	void InitializeTalonFXElevatorFollowerPRACTICE_BOT9999();

	ctre::phoenix6::controls::PositionTorqueCurrentFOC m_ArmPositionDegree{units::angle::turn_t ( 0.0 ) };
	ctre::phoenix6::controls::PositionTorqueCurrentFOC m_ElevatorLeaderPositionInch{units::angle::turn_t ( 0.0 ) };
	double  m_CoralActiveTarget;
	double  m_AlgaeActiveTarget;

	ctre::phoenix6::controls::ControlRequest *m_ArmActiveTarget;
	ctre::phoenix6::controls::ControlRequest *m_ElevatorLeaderActiveTarget;

	double m_loopRate = 0.02;
	double m_armChangeRate = 1 * m_loopRate;
	double m_elevatorChangeRate= 1*m_loopRate;

	bool m_manualMode = false;
};