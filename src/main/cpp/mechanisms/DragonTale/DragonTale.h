//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.05
// Generated on Sunday, February 16, 2025 8:51:02 PM

#pragma once

#include <memory>
#include <string>

// FRC Includes
#include <networktables/NetworkTable.h>

#include "ctre/phoenix6/TalonFX.hpp"
#include "ctre/phoenix6/controls/Follower.hpp"
#include "ctre/phoenix6/configs/Configs.hpp"
#include <ctre/phoenix/motorcontrol/can/TalonSRX.h>
#include <ctre/phoenix/motorcontrol/SupplyCurrentLimitConfiguration.h>
#include "ctre/phoenix6/TalonFXS.hpp"
#include <frc/DigitalInput.h>
#include <frc/filter/Debouncer.h>
#include <ctre/phoenix6/CANcoder.hpp>
#include <ctre/phoenix6/configs/Configurator.hpp>
#include <ctre/phoenix6/signals/SpnEnums.hpp>

#include "mechanisms/base/BaseMech.h"
#include "state/StateMgr.h"
#include "state/IRobotStateChangeSubscriber.h"
#include "mechanisms/controllers/ControlData.h"
#include "state/RobotStateChanges.h"

#include "configs/RobotElementNames.h"
#include "configs/MechanismConfigMgr.h"

#include "RobotIdentifier.h"

#include "frc/geometry/Pose2d.h"
#include "fielddata/FieldConstants.h"

class DragonTale : public BaseMech, public StateMgr, public IRobotStateChangeSubscriber
{
public:
	enum STATE_NAMES
	{
		STATE_INITIALIZE,
		STATE_READY,
		STATE_HUMAN_PLAYER_LOAD,
		STATE_GRAB_ALGAE_REEF,
		STATE_HOLD,
		STATE_GRAB_ALGAE_FLOOR,
		STATE_PROCESS,
		STATE_NET,
		STATE_SCORE_ALGAE,
		STATE_L1SCORING_POSITION,
		STATE_L2SCORING_POSITION,
		STATE_L3SCORING_POSITION,
		STATE_L4SCORING_POSITION,
		STATE_SCORE_CORAL,
		STATE_MANUAL_CORAL_LOAD,
		STATE_MANUAL_GRAB_ALGAE_REEF,
		STATE_MANUAL_GRAB_ALGAE_FLOOR
	};

	DragonTale(RobotIdentifier activeRobotId);
	DragonTale() = delete;
	~DragonTale() = default;

	void CreatePRACTICE_BOT9999();
	void CreateCOMP_BOT302();
	void InitializePRACTICE_BOT9999();
	void InitializeCOMP_BOT302();

	/// @brief Set the control constants (e.g. PIDF values).
	/// @param indentifier the motor controller usage to identify the motor
	/// @param slot position on the motor controller to set
	/// @param pid control data / constants
	virtual void SetControlConstants(RobotElementNames::MOTOR_CONTROLLER_USAGE indentifier, int slot, ControlData pid);

	/// @brief update the output to the mechanism using the current controller and target value(s)
	virtual void Update();

	void UpdateTargetArmPositionDegree(units::angle::turn_t position)
	{
		m_ArmPositionDegree.Position = position;
		m_ArmActiveTarget = &m_ArmPositionDegree;
	}
	void UpdateTargetElevatorLeaderPositionInch(units::length::inch_t position)
	{
		if (position < GetElevatorHeight())
		{
			m_ElevatorLeaderPositionInch.Velocity = 10_tps;
			m_ElevatorLeaderPositionInch.Acceleration = 20_tr_per_s_sq;
		}
		else
		{
			m_ElevatorLeaderPositionInch.Velocity = 100_tps;
			m_ElevatorLeaderPositionInch.Acceleration = 150_tr_per_s_sq;
		}
		m_ElevatorLeaderPositionInch.Position = units::angle::turn_t(position.value());
		m_ElevatorLeaderActiveTarget = &m_ElevatorLeaderPositionInch;
	}
	void UpdateTargetCoralTalonSRXPercentOutput(double percentOut) { m_CoralTalonSRXActiveTarget = percentOut; }
	void UpdateTargetCoralTalonFXSPercentOutput(double percentOut)
	{
		m_CoralPercentOutput.Output = percentOut;
		m_CoralTalonFXSActiveTarget = &m_CoralPercentOutput;
	}
	void UpdateTargetCoralTalonFXSPercentOutput(double percentOut, bool enableFOC)
	{
		m_CoralPercentOutput.Output = percentOut;
		m_CoralPercentOutput.EnableFOC = enableFOC;
		m_CoralTalonFXSActiveTarget = &m_CoralPercentOutput;
	}
	void UpdateTargetAlgaeTalonFXPercentOutput(double percentOut)
	{
		m_AlgaePercentOutput.Output = percentOut;
		m_AlgaeTalonFXActiveTarget = &m_AlgaePercentOutput;
	}
	void UpdateTargetAlgaeTalonFXPercentOutput(double percentOut, bool enableFOC)
	{
		m_AlgaePercentOutput.Output = percentOut;
		m_AlgaePercentOutput.EnableFOC = enableFOC;
		m_AlgaeTalonFXActiveTarget = &m_AlgaePercentOutput;
	}
	void UpdateTargetAlgaeTalonFXSPercentOutput(double percentOut)
	{
		m_AlgaePercentOutput.Output = percentOut;
		m_AlgaeTalonFXSActiveTarget = &m_AlgaePercentOutput;
	}
	void UpdateTargetAlgaeTalonFXSPercentOutput(double percentOut, bool enableFOC)
	{
		m_AlgaePercentOutput.Output = percentOut;
		m_AlgaePercentOutput.EnableFOC = enableFOC;
		m_AlgaeTalonFXSActiveTarget = &m_AlgaePercentOutput;
	}

	void SetPIDArmPositionDegree();
	void SetPIDElevatorLeaderPositionInch();

	virtual bool IsAtMinPosition(RobotElementNames::MOTOR_CONTROLLER_USAGE identifier) const;
	virtual bool IsAtMaxPosition(RobotElementNames::MOTOR_CONTROLLER_USAGE identifier) const;

	void CreateAndRegisterStates();
	void Cyclic();
	void RunCommonTasks() override;

	RobotIdentifier getActiveRobotId() { return m_activeRobotId; }

	ctre::phoenix6::hardware::TalonFX *GetArm() const { return m_Arm; }
	ctre::phoenix6::hardware::TalonFX *GetElevatorLeader() const { return m_ElevatorLeader; }
	ctre::phoenix::motorcontrol::can::TalonSRX *GetCoralTalonSRX() const { return m_CoralTalonSRX; }
	ctre::phoenix6::hardware::TalonFX *GetAlgaeTalonFX() const { return m_AlgaeTalonFX; }
	ctre::phoenix6::hardware::TalonFX *GetElevatorFollower() const { return m_ElevatorFollower; }
	ctre::phoenix6::hardware::TalonFXS *GetCoralTalonFXS() const { return m_CoralTalonFXS; }
	ctre::phoenix6::hardware::TalonFXS *GetAlgaeTalonFXS() const { return m_AlgaeTalonFXS; }
	bool GetCoralInSensorState() const { return !m_CoralInSensor->Get(); }
	bool GetCoralOutSensorState() const { return m_CoralOutSensor->Get(); }
	bool GetAlgaeSensorState() const { return !m_AlgaeSensor->Get(); }
	ctre::phoenix6::hardware::CANcoder *GetArmAngleSensor() const { return m_ArmAngleSensor; }
	ctre::phoenix6::hardware::CANcoder *GetElevatorHeightSensor() const { return m_ElevatorHeightSensor; }
	ControlData *GetPositionInch() const { return m_PositionInch; }
	ControlData *GetPositionDegree() const { return m_PositionDegree; }
	ControlData *GetPercentOutput() const { return m_PercentOutput; }

	units::length::inch_t GetElevatorHeight() { return units::length::inch_t(m_ElevatorLeader->GetPosition().GetValueAsDouble()); }
	bool AllSensorsFalse() { return !GetCoralInSensorState() && !GetCoralOutSensorState() && !GetAlgaeSensorState(); }

	units::angle::degree_t GetArmAngle() { return m_ArmAngleSensor->GetAbsolutePosition().GetValue(); }

	bool IsCoralMode() const { return m_scoringMode == RobotStateChanges::ScoringMode::Coral; }
	bool IsAlgaeMode() const { return m_scoringMode == RobotStateChanges::ScoringMode::Algae; }

	void ManualControl();

	void NotifyStateUpdate(RobotStateChanges::StateChange change, int value);

	units::length::inch_t GetAlgaeHeight();

	void SetArmTarget(units::angle::degree_t target) { m_armTarget = std::clamp(target, m_minAngle, m_maxAngle); }
	void SetElevatorTarget(units::length::inch_t target) { m_elevatorTarget = std::clamp(target, m_minHeight, m_maxHeight); }

	bool GetManualMode() { return m_manualMode; }
	void SetSensorFailSafe();

	void UpdateTarget();

	bool AtTarget();

	virtual void NotifyStateUpdate(RobotStateChanges::StateChange change, frc::Pose2d value) override;

	frc::Pose3d GetReefCenter();

	static std::map<std::string, STATE_NAMES> stringToSTATE_NAMESEnumMap;

	void SetCurrentState(int state, bool run) override;

protected:
	RobotIdentifier m_activeRobotId;
	std::string m_ntName;
	std::string m_tuningIsEnabledStr;
	bool m_tuning = false;
	std::shared_ptr<nt::NetworkTable> m_table;

	ControlData *GetControlData(std::string name) override;

private:
	std::unordered_map<std::string, STATE_NAMES> m_stateMap;

	ctre::phoenix6::hardware::TalonFX *m_Arm;
	ctre::phoenix6::hardware::TalonFX *m_ElevatorLeader;
	ctre::phoenix::motorcontrol::can::TalonSRX *m_CoralTalonSRX;
	ctre::phoenix6::hardware::TalonFX *m_AlgaeTalonFX;
	ctre::phoenix6::hardware::TalonFX *m_ElevatorFollower;
	ctre::phoenix6::hardware::TalonFXS *m_CoralTalonFXS;
	ctre::phoenix6::hardware::TalonFXS *m_AlgaeTalonFXS;
	frc::DigitalInput *m_CoralInSensor;
	frc::DigitalInput *m_CoralOutSensor;
	frc::DigitalInput *m_AlgaeSensor;
	ctre::phoenix6::hardware::CANcoder *m_ArmAngleSensor;
	ctre::phoenix6::hardware::CANcoder *m_ElevatorHeightSensor;
	ControlData *m_PositionInch;
	ControlData *m_PositionDegree;
	ControlData *m_PercentOutput;
	RobotStateChanges::ScoringMode m_scoringMode;

	const units::length::inch_t m_grabAlgaeHigh = units::length::inch_t(10.7); // change these later
	const units::length::inch_t m_grabAlgaeLow = units::length::inch_t(3.7);

	units::angle::degree_t m_armTarget = units::angle::degree_t(90.0);
	units::length::inch_t m_elevatorTarget = units::length::inch_t(0.0);

	const units::angle::degree_t m_minAngle{-30.0};
	const units::angle::degree_t m_maxAngle{90.0};

	const units::length::inch_t m_minHeight{0.0};
	const units::length::inch_t m_maxHeight{30.0};

	const units::length::inch_t m_elevatorErrorThreshold{4.0};
	const units::length::inch_t m_elevatorProtectionHeight{5.0};
	const units::angle::degree_t m_armProtectionAngle{80.0};

	void CheckForTuningEnabled();
	void ReadTuningParamsFromNT();
	void PushTuningParamsToNT();

	void InitializeTalonFXArmPRACTICE_BOT9999();
	void InitializeTalonFXElevatorLeaderPRACTICE_BOT9999();
	void InitializeTalonSRXCoralPRACTICE_BOT9999();
	void InitializeTalonFXAlgaePRACTICE_BOT9999();
	void InitializeTalonFXElevatorFollowerPRACTICE_BOT9999();
	void InitializeTalonFXArmCOMP_BOT302();
	void InitializeTalonFXElevatorLeaderCOMP_BOT302();
	void InitializeTalonFXElevatorFollowerCOMP_BOT302();
	void InitializeTalonFXSCoralCOMP_BOT302();
	void InitializeTalonFXSAlgaeCOMP_BOT302();

	ctre::phoenix6::controls::MotionMagicVoltage m_ArmPositionDegree{0_tr};
	ctre::phoenix6::controls::DynamicMotionMagicVoltage m_ElevatorLeaderPositionInch{0_tr, 1_tps, 10_tr_per_s_sq, 100_tr_per_s_cu};

	double m_CoralTalonSRXActiveTarget;
	ctre::phoenix6::controls::DutyCycleOut m_CoralPercentOutput{0.0};
	ctre::phoenix6::controls::DutyCycleOut m_AlgaePercentOutput{0.0};

	ctre::phoenix6::controls::ControlRequest *m_ArmActiveTarget;
	ctre::phoenix6::controls::ControlRequest *m_ElevatorLeaderActiveTarget;
	ctre::phoenix6::controls::ControlRequest *m_CoralTalonFXSActiveTarget;
	ctre::phoenix6::controls::ControlRequest *m_AlgaeTalonFXActiveTarget;
	ctre::phoenix6::controls::ControlRequest *m_AlgaeTalonFXSActiveTarget;

	double m_loopRate = 0.02;
	double m_armChangeRate = 3 * m_loopRate;
	double m_elevatorChangeRate = 3 * m_loopRate;

	bool m_manualMode = false;

	units::length::inch_t m_elevatorAtTargetThreshold{2.0};
	units::angle::degree_t m_ArmAtTargetThreshold{1.0};
	frc::Pose2d m_robotPose;
};