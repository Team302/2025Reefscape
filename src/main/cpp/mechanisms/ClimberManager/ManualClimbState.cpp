//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.05
// Generated on Sunday, February 16, 2025 5:48:03 PM

// C++ Includes
#include <string>

// FRC includes

// Team 302 includes
#include "mechanisms/ClimberManager/ManualClimbState.h"
#include "teleopcontrol/TeleopControl.h"
#include "teleopcontrol/TeleopControlFunctions.h"
#include "utils/logging/Logger.h"

// Third Party Includes

using namespace std;
using namespace ClimberManagerStates;

/// @class ExampleForwardState
/// @brief information about the control (open loop, closed loop position, closed loop velocity, etc.) for a mechanism state
ManualClimbState::ManualClimbState(std::string stateName,
								   int stateId,
								   ClimberManager *mech,
								   RobotIdentifier activeRobotId) : State(stateName, stateId), m_mechanism(mech), m_RobotId(activeRobotId)
{
}

void ManualClimbState::Init()
{
	Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ManualClimbState"), string("Init"));
	m_manualTarget = m_ClimberTarget;
	// 	if (m_RobotId == RobotIdentifier::PRACTICE_BOT_9999)
	// 		InitPRACTICE_BOT9999();
	// 	else if (m_RobotId == RobotIdentifier::COMP_BOT_302)
	// 		InitCOMP_BOT302();
	m_mechanism->UpdateTargetClimberPercentOut(-0.05); // also change this one for testing :(
	m_positionThreshold = m_mechanism->GetClimber()->GetPosition().GetValue() - units::angle::degree_t(2.0);
}

void ManualClimbState::InitPRACTICE_BOT9999()
{
	m_mechanism->SetPIDClimberPositionDegree();
	m_mechanism->UpdateTargetClimberPositionDegree(m_ClimberTarget);
}

void ManualClimbState::InitCOMP_BOT302()
{
	m_mechanism->SetPIDClimberPositionDegree();
	m_mechanism->UpdateTargetClimberPositionDegree(m_ClimberTarget);
}

void ManualClimbState::Run()
{
	// Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ManualClimbState"), string("Run"));
	if (!m_directionVerified)
	{
		m_counter++;
		units::current::ampere_t current = m_mechanism->GetClimber()->GetStatorCurrent().GetValue();

		if (current > units::current::ampere_t(1.0)) // number subject to change :)
		{
			m_directionVerified = true;
		}
		else if (m_counter > 50) // this one too (maybe dont even need it hopefully :thumbs_up:)
		{
			m_mechanism->GetClimber()->SetInverted(true);
			m_directionVerified = true;
		}
		if (m_directionVerified)
		{
			m_mechanism->UpdateTargetClimberPercentOut(0);

			// if (m_RobotId == RobotIdentifier::PRACTICE_BOT_9999)
			// 	InitPRACTICE_BOT9999();
			// else if (m_RobotId == RobotIdentifier::COMP_BOT_302)     this is what will realy run when done testing
			// 	InitCOMP_BOT302();
		}
	}

	else
	{
		units::angle::degree_t TargetChange = units::angle::degree_t(TeleopControl::GetInstance()->GetAxisValue(TeleopControlFunctions::MANUAL_CLIMB) * m_manualClimbRate);
		m_manualTarget += TargetChange;

		m_mechanism->UpdateTargetClimberPositionDegree(std::clamp(m_manualTarget, m_minClimberAngle, m_maxClimberAngle));
	}
}

void ManualClimbState::Exit()
{
	// Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ManualClimbState"), string("Exit"));
}

bool ManualClimbState::AtTarget()
{
	// Logger::GetLogger()->LogData(LOGGER_LEVEL::PRINT, string("ArrivedAt"), string("ManualClimbState"), string("AtTarget"));

	bool atTarget = false;
	return atTarget;
}

bool ManualClimbState::IsTransitionCondition(bool considerGamepadTransitions)
{
	// To get the current state use m_mechanism->GetCurrentState()

	return m_mechanism->IsClimbMode();

	// return (considerGamepadTransitions && TeleopControl::GetInstance()->IsButtonPressed(TeleopControlFunctions::EXAMPLE_MECH_FORWARD));
}
