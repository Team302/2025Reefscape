// clang-format off
//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.02
// Generated on Friday, January 24, 2025 8:21:52 PM

#pragma once
#include <string>

#include "mechanisms/ClimberManager/ClimberManager.h"
#include "state/State.h"

using namespace std;

namespace ClimberManagerStates
{
class ManualClimbState : public State
{
public:
	ManualClimbState() = delete;
	ManualClimbState ( std::string stateName,
	                   int stateId,
	                   ClimberManager *mech,
	                   RobotIdentifier activeRobotId );
	~ManualClimbState() = default;
	void Init() override;
	void Run() override;
	void Exit() override;
	bool AtTarget() override;
	bool IsTransitionCondition ( bool considerGamepadTransitions ) override;

private:
	ClimberManager *m_mechanism;
	double m_manualClimbRate = 0.02;
	void InitPRACTICE_BOT9999();
	RobotIdentifier m_RobotId;
	const units::angle::turn_t m_ClimberTarget = units::angle::turn_t ( 0 );
	units::angle::degree_t m_manualTarget;
	units::angle::degree_t m_minClimberAngle{-10.0};
	units::angle::degree_t m_maxClimberAngle{95.0};

};
}
