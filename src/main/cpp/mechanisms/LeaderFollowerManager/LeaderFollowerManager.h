// clang-format off
//====================================================================================================================================================
// Copyright 2025 Lake Orion Robotics FIRST Team 302
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
//====================================================================================================================================================
// This file was automatically generated by the Team 302 code generator version 20.25.00.02
// Generated on Friday, January 24, 2025 10:55:46 PM

#pragma once

#include <string>
#include <memory>

// FRC Includes
#include <networktables/NetworkTable.h>

#include "ctre/phoenix6/TalonFX.hpp"
#include "ctre/phoenix6/controls/Follower.hpp"
#include "ctre/phoenix6/configs/Configs.hpp"
#include <ctre/phoenix6/CANcoder.hpp>
#include <ctre/phoenix6/configs/Configurator.hpp>
#include <ctre/phoenix6/signals/SpnEnums.hpp>

#include "mechanisms/base/BaseMech.h"
#include "state/StateMgr.h"
#include "mechanisms/controllers/ControlData.h"

#include "configs/RobotElementNames.h"
#include "configs/MechanismConfigMgr.h"

class LeaderFollowerManager : public BaseMech, public StateMgr
{
public:
	enum STATE_NAMES
	{
		STATE_OFF,
		STATE_MID,
		STATE_HIGH
	};

	LeaderFollowerManager ( MechanismConfigMgr::RobotIdentifier activeRobotId );
	LeaderFollowerManager() = delete;
	~LeaderFollowerManager() = default;

	void CreateThingThree3();
	void InitializeThingThree3();


	/// @brief Set the control constants (e.g. PIDF values).
	/// @param indentifier the motor controller usage to identify the motor
	/// @param slot position on the motor controller to set
	/// @param pid control data / constants
	virtual void SetControlConstants ( RobotElementNames::MOTOR_CONTROLLER_USAGE indentifier, int slot, ControlData pid );

	/// @brief update the output to the mechanism using the current controller and target value(s)
	virtual void Update();

	void UpdateTargetLeaderPosInch ( units::length::inch_t position ) { m_LeaderPosInch.Position = units::angle::turn_t ( ( position/ ( units::length::meter_t ( 1 ) ) ).value() * 1 / std::numbers::pi ); m_LeaderActiveTarget = &m_LeaderPosInch;}
	void UpdateTargetFollowerPosInch ( units::length::inch_t position ) { m_FollowerPosInch.Position = units::angle::turn_t ( ( position/ ( units::length::meter_t ( 1 ) ) ).value() * 1 / std::numbers::pi ); m_FollowerActiveTarget = &m_FollowerPosInch;}

	void SetPIDLeaderPosInch();
	void SetPIDFollowerPosInch();




	virtual bool IsAtMinPosition ( RobotElementNames::MOTOR_CONTROLLER_USAGE identifier ) const;
	virtual bool IsAtMaxPosition ( RobotElementNames::MOTOR_CONTROLLER_USAGE identifier ) const;



	void CreateAndRegisterStates();
	void Cyclic();
	void RunCommonTasks() override;

	MechanismConfigMgr::RobotIdentifier getActiveRobotId() { return m_activeRobotId; }

	ctre::phoenix6::hardware::TalonFX* GetLeader() const {return m_Leader;}
	ctre::phoenix6::hardware::TalonFX* GetFollower() const {return m_Follower;}
	ctre::phoenix6::hardware::CANcoder* GetLeaderCANcoder() const {return m_LeaderCANcoder;}
	ControlData* GetPosInch() const {return m_PosInch;}

	static std::map<std::string, STATE_NAMES> stringToSTATE_NAMESEnumMap;

protected:
	MechanismConfigMgr::RobotIdentifier m_activeRobotId;
	std::string m_ntName;
	std::string m_tuningIsEnabledStr;
	bool m_tuning = false;
	std::shared_ptr<nt::NetworkTable> m_table;

	void SetCurrentState ( int state, bool run ) override;
	ControlData *GetControlData ( std::string name ) override;

private:
	std::unordered_map<std::string, STATE_NAMES> m_stateMap;

	ctre::phoenix6::hardware::TalonFX* m_Leader;
	ctre::phoenix6::hardware::TalonFX* m_Follower;
	ctre::phoenix6::hardware::CANcoder* m_LeaderCANcoder;
	ControlData* m_PosInch;



	void CheckForTuningEnabled();
	void ReadTuningParamsFromNT();
	void PushTuningParamsToNT();

	void InitializeTalonFXLeaderThingThree3();
	void InitializeTalonFXFollowerThingThree3();

	ctre::phoenix6::controls::PositionTorqueCurrentFOC m_LeaderPosInch{units::angle::turn_t ( 0.0 ) };
	ctre::phoenix6::controls::PositionTorqueCurrentFOC m_FollowerPosInch{units::angle::turn_t ( 0.0 ) };
	ctre::phoenix6::controls::ControlRequest *m_LeaderActiveTarget;
	ctre::phoenix6::controls::ControlRequest *m_FollowerActiveTarget;
};